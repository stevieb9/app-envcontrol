#!/usr/bin/perl
use strict;
use warnings;

use Wx;
use RPi::DHT11::EnvControl;
use RPi::WiringPi;
use RPi::WiringPi::Constant qw(:all);

our $VERSION = '0.01';

package EnvControlFrame;

use Wx::Event qw(EVT_BUTTON EVT_TIMER );
use base qw/Wx::Frame/;
use RPi::WiringPi::Constant qw(:all);

my $pi = RPi::WiringPi->new(setup => 'WPI');
my $env = RPi::DHT11::EnvControl->new(spin => 1);

sub new {
    my $class = shift;
    my $self = $class->SUPER::new(@_);

    my $panel = $self->panel;

    $self->_pin_setup;
    $self->_xy;

    $self->display_headers($panel);
    $self->display_env($panel);

    $self->limits(78, 20);
    $self->display_limits($panel);

    $self->buttons($panel);

    $self->temp_check_event($panel);

    return $self;
}
sub panel {
              my $self = shift;

              my $panel = Wx::Panel->new(
              $self,
              -1,      # id
              [-1, -1],           #position
              [800, 800],           # size
              );

              return $panel;
              }
sub limits {
    my ($self, $t, $h) = @_;
    $self->{t_limit} = $t;
    $self->{h_limit} = $h;
}
sub display_headers {
     my ($self, $panel) = @_;

    my $font = Wx::Font->new(16);

    # temp header

    $self->{t_header} = Wx::StaticText->new(
        $panel,
        1,
        "Temperature",
        $self->{xy}{t_header}
    );

    $self->{t_header}->SetFont($font);

    # humidity header

    $self->{h_header} = Wx::StaticText->new(
        $panel,
        2,
        "Humidity",
        $self->{xy}{h_header}
    );

    $self->{h_header}->SetFont($font);

    # aux 1 header

    $self->{aux1_header} = Wx::StaticText->new(
        $panel,
        3,
        "Auxillary #1",
        $self->{xy}{aux1_header}
    );

    $self->{aux1_header}->SetFont($font);
}
sub display_limits {
    my ($self, $panel) = @_;

    my $font = Wx::Font->new(16);

    $self->{t_display} = Wx::StaticText->new(
        $panel,
        1,
        "Max: $self->{t_limit}",
        $self->{xy}{t_limit},
    );

    $self->{t_display}->SetFont($font);

    $self->{h_display} = Wx::StaticText->new(
        $panel,
        2,
        "Min: $self->{h_limit}",
        $self->{xy}{h_limit},
    );

    $self->{h_display}->SetFont($font);

    # aux1 status

    $self->{aux1_display} = Wx::StaticText->new(
        $panel,
        3,
        "off",
        $self->{xy}{aux1_status},
    );

    $self->{h_display}->SetFont($font);
}
sub display_env {
    my ($self, $panel) = @_;

    my $font = Wx::Font->new(16);

    $self->{temp} = Wx::StaticText->new(
        $panel,
        1,
        $env->temp('f') . " F",
        $self->{xy}{temp},
    );

    $self->{temp}->SetFont($font);

    $self->{humidity} = Wx::StaticText->new(
        $panel,
        2,
        $env->humidity . " %",
        $self->{xy}{humidity},
    );

    $self->{humidity}->SetFont($font);
}
sub buttons {
    my ($self, $panel) = @_;

     # temp limit down button

    $self->{t_raise} = Wx::Button->new(
        $panel,
        1,
        "lower",
        $self->{xy}{t_lower},
    );

    EVT_BUTTON($self, 1, \&temp_lower);

    # temp limit up button

    $self->{t_raise} = Wx::Button->new(
        $panel,
        2,
        "raise",
        $self->{xy}{t_raise},
    );

    EVT_BUTTON($self, 2, \&temp_raise);

    # hum down

    $self->{h_lower} = Wx::Button->new(
        $panel,
        3,
        "lower",
        $self->{xy}{h_lower},
    );

    EVT_BUTTON($self, 3, \&hum_lower);

    # hum up

    $self->{hum_raise} = Wx::Button->new(
        $panel,             # parent
        4,
        "raise",
        $self->{xy}{h_raise},
    );

    EVT_BUTTON($self, 4, \&aux1_on);

    # aux1 on

     $self->{aux1_on} = Wx::Button->new(
        $panel,
        5,
        "on",
        $self->{xy}{aux1_on},
    );

    EVT_BUTTON($self, 5, \&aux1_on);

    # aux1 off

     $self->{aux1_off} = Wx::Button->new(
        $panel,
        6,
        "off",
        $self->{xy}{aux1_off},
    );

    EVT_BUTTON($self, 6, \&aux1_off);

}
sub temp_check_event {
    my ($self, $panel) = @_;
    my $timer  = Wx::Timer->new($self, -1,);
    $timer->Start(10000);
    EVT_TIMER $self, $timer, \&get_env;
}
sub get_env {
    my ($self, $event) = @_;

    my $temp = $env->temp('feature');
    my $hum = $env->humidity;

    # temp

    if ($self->{t_limit} < $temp){
        $self->{temp}->SetLabel("*$temp F");
    }
    else {
        $self->{temp}->SetLabel("$temp F");
    }

    # humidity

    if ($self->{h_limit} > $hum){
        $self->{humidity}->SetLabel("*$hum %");
    }
    else {
        $self->{humidity}->SetLabel("$hum %");
    }
}
sub aux1_on {
    my $self = shift;
    $self->{aux1_pin}->write(HIGH);
}
sub aux1_off {
    my $self = shift;
    $self->{aux1_pin}->write(LOW);
}
sub temp_raise {
    my( $self, $event ) = @_;
    $self->{t_limit}++;
    $self->{t_display}->SetLabel("Max: $self->{t_limit}");
}
sub temp_lower {
    my( $self, $event ) = @_;
    $self->{t_limit}--;
    $self->{t_display}->SetLabel("Max $self->{t_limit}");
}
sub hum_raise {
    my( $self, $event ) = @_;
    $self->{h_limit}++;
    $self->{h_display}->SetLabel("Min: $self->{h_limit}");
}
sub hum_lower {
    my( $self, $event ) = @_;
    $self->{h_limit}--;
    $self->{h_display}->SetLabel("Min: $self->{h_limit}");
}
sub _xy {
    my $self = shift;

    $self->{xy} = {
        # temp

        t_header    => [50, 5],
        temp        => [50, 30],
        t_limit     => [140, 30],
        t_lower     => [50, 60],
        t_raise     => [140, 60],

        # humidity

        h_header    => [50, 120],
        humidity    => [50, 145],
        h_limit     => [140, 145],
        h_lower     => [50, 175],
        h_raise     => [140, 175],

        # aux 1

        aux1_header => [240, 5],
        aux1_on     => [240, 60],
        aux1_off    => [330, 60],
    };
}
sub _pin_setup {
    my $self = shift;
    $self->{aux1_pin} = $pi->pin(29);
    $self->{aux1_pin}->mode(OUTPUT);
    $self->{aux1_pin}->write(LOW);
}
package EnvControl;

use base qw(Wx::App);

sub OnInit {
    my $self = shift;
    my $frame = EnvControlFrame->new(
        undef,
        -1,
        'RPi::DHT11::EnvControl::GUI',
        [1, 1],
        [600, 600]
    );
    $self->SetTopWindow($frame);
    $frame->Show(1);
}

package main;

my $app = EnvControl->new();
$app->MainLoop();

$pi->cleanup;

=cut

=head1 NAME

App::envcontrol - Wx GUI-based climate control touch interface for Raspberry Pi

=head1 DESCRIPTION

This application is for the Raspberry Pi, designed as a touch-screen graphical
interface.

Minimum requirements:

    - Raspberry Pi device
    - DHT11 temperature/humidity sensor connected to a GPIO pin
    - Wx and all of its related dependencies installed
    - RPi::WiringPi (minimum v1.01) installed

=head1 AUTHOR

Steve Bertrand, E<lt>steveb@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2016 by Steve Bertrand

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.18.2 or,
at your option, any later version of Perl 5 you may have available.
